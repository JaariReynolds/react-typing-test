@use "../_constants.scss";
@use "../_variables.scss";
@use "../_mixins.scss";

.typing-test {
    margin-top: 3rem;
    -webkit-user-select: none;
    user-select: none;
    grid-area: 1 / 1;
    width: 100%;
    height: var(--test-words-max-height);
    overflow: hidden;
    position: absolute;
    font-weight: 300;

    .text-field-container {
        position: absolute;
        display: flex;
        width: 100%;
        height: var(--test-words-max-height);
        margin-bottom: 5rem;
        z-index: 10;

        .text-field {
            width: 100%;
            background-color: transparent;
            color: transparent;
            border: none;
            font-size: 1px;
        }

        input:focus {
            outline: none;
        }
    }

    .debug {
        position: absolute;
    }

    .words-container {
        @include mixins.transition-words();
        display: flex;
        flex-wrap: wrap;
        max-height: var(--test-words-max-height);
        font-size: 2rem; // 'scroll transition' amount is dependent on the text properties in this class
        line-height: constants.$word-line-height;
        position: absolute;

        .caret {
            transition-property: left, top, background-color;
            transition-timing-function: linear, linear, ease-in-out;
            transition-duration: 0.125s, 0.125s, 0.3s;
            background-color: var(--primary-highlight-colour);
            border-radius: 0.25rem;
            width: .2rem;
            position: absolute;
            height: constants.$word-line-height; // should always match line height of words ^

            &.awaiting-input {
                animation: blinking-caret 1.5s linear infinite;
            }
        }

        .word {
            margin-right: 1.25rem;

            &.last-word-in-line {
                text-decoration: underline;
            }

            .letter {
                @include mixins.transition-text-color();
                transition-duration: constants.$letter-colour-transition-duration;
                border-left: 3px solid transparent;

                // if these are changed, need to update letterColour() in TypingTest.tsx
                &.base-text-colour {
                    color: var(--base-font-colour);
                }

                &.correct-text-colour {
                    color: var(--secondary-highlight-colour);
                }

                &.incorrect-text-colour {
                    color: constants.$incorrect-font-colour;
                }
            }
        }
    }
}