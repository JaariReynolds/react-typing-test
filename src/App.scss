@use "styles/_variables.scss";
@use "styles/font-faces.scss";
@use "styles/_mixins.scss";
@use "styles/_constants.scss";

body {
  margin: 0;
  background-color: var(--background-colour);
  font-family: "Roboto Mono";
  font-weight: 400;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  @include mixins.general-color-transition();
}

.App {
  text-align: left;
  align-items: center;
  justify-content: center;
  color: var(--base-font-colour);
  height: 100vh;
}

@media (max-width: 670px) {
  .test-options {
    grid-template-columns: repeat(1, 1fr);
  }
}

@media (min-width: 671px) {
  .test-options {
    grid-template-columns: repeat(2, 1fr);
  }
}

.afk-indicator-container {
  @include mixins.transition-opacity(var(--afk-opacity));
  background-color: constants.$incorrect-font-colour;
  border-radius: 0.5rem;
  display: flex;
  position: absolute;
  top: -5rem;
  left: 50%;
  transform: translateX(-50%);
  width: 21.5rem;
  height: 40px;
  justify-content: center;
  font-size: constants.$base-font-size;

  .afk-indicator-contents {
    @include mixins.general-color-and-opacity-transition();
    align-items: center;
    border-radius: 0.5rem;
    position: relative;
    color: var(--background-colour);
    display: flex;

    .afk-icon {
      margin-right: 0.5rem;
    }
  }
}

.hidden-radio-button {
  display: none;
}

.main-container {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  flex-direction: column;

  .inner-container {
    width: 70%;
    height: 10%;
    position: relative;
    margin-top: 8rem;

    .test-completion-bar {
      display: flex;
      position: relative;
      height: 0.5rem;
      border-radius: 0.25rem;
      background-color: var(--primary-highlight-colour);
      width: var(--completion-percentage);
      max-width: 100%;
      transition: width constants.$completion-bar-transition-duration linear, background-color 0.3s ease-in-out; // needs to be hard written like this unless in a @mixin JUST for this use case
      margin-top: 1rem;
    }

    .capslock-indicator-container {
      transition: opacity 0.1s ease-in-out;
      opacity: var(--capslock-opacity);
      display: flex;
      justify-content: center;
      position: relative;
      height: 40px;
      margin-top: 1rem;
      margin-bottom: 2rem;
      font-size: constants.$base-font-size;
      cursor: default;


      .capslock-indicator-contents {
        align-items: center;
        width: 10.5rem;
        border-radius: 0.5rem;
        justify-content: center;
        background-color: var(--primary-highlight-colour);
        color: var(--background-colour);
        display: flex;

        .capslock-icon {
          margin-right: 0.5rem;
        }
      }
    }

    .test-options {
      display: grid;
      font-size: constants.$base-font-size;
      @include mixins.transition-opacity(var(--component-opacity));

      .test-options-icon {
        margin-right: 0.25rem;
      }

      .test-option-selector {
        grid-column: span 1 / span 1;
        text-align: center;
        -webkit-user-select: none;
        user-select: none;
        margin-bottom: 1rem;
        @include mixins.transition-opacity(var(--component-opacity)); // used for switching between words/time

        &.uninteractable-selector {
          pointer-events: none;
        }

        &.test-type-words {
          opacity: var(--test-type-words-opacity);
          grid-area: 2 / 1;
        }

        &.test-type-time {
          opacity: var(--test-type-time-opacity);
          grid-area: 2 / 1;
        }

        .option-text {
          color: var(--base-font-colour);
          transition: color 0.15s ease-in-out;

          :hover {
            cursor: pointer;
            color: constants.$hover-font-colour;
            transition: color 0.15s ease-in-out;
          }

          .selectable-label {
            padding: 0.5rem;
            margin: 0.25rem;
            font-weight: constants.$bold-font-weight;
          }
        }
      }
    }
  }

  input[type="radio"]:checked+label {
    @include mixins.general-color-transition();
    color: var(--primary-highlight-colour);
  }

  input[type="checkbox"]:checked+label {
    @include mixins.general-color-transition();
    color: var(--primary-highlight-colour);
  }
}

.results-overlap-container {
  display: grid;
  grid-template-areas: 1 / 1;
  height: 25rem;
  -webkit-user-select: none;
  user-select: none;

  .WPM-div {
    grid-area: 7/1;
    position: relative;
    text-align: center;
    font-size: 4rem;
    color: var(--base-font-colour);
    opacity: var(--WPM-opacity);
    display: var(--WPM-display);
  }

  .typing-test {
    margin-top: 3rem;
    -webkit-user-select: none;
    user-select: none;
    grid-area: 1 / 1;
    width: 100%;
    height: var(--test-words-max-height);
    overflow: hidden;
    position: absolute;
    display: var(--test-words-display);
    font-weight: 300;



    .text-field-container {
      position: absolute;
      display: flex;
      width: 100%;
      height: var(--test-words-max-height);
      margin-bottom: 5rem;
      z-index: 10;

      .text-field {
        width: 100%;
        background-color: transparent;
        color: transparent;
        border: none;
        font-size: 1px;
      }

      input:focus {
        outline: none;
      }
    }

    .debug {
      position: absolute;

    }

    .words-container {
      @include mixins.transition-words();
      display: flex;
      flex-wrap: wrap;
      opacity: var(--typing-test-opacity);
      max-height: var(--test-words-max-height);
      font-size: 2rem; // 'scroll transition' amount is dependent on the text properties in this class
      line-height: constants.$word-line-height;
      top: var(--test-words-div-offset);
      position: absolute;



      .caret {
        transition-property: left, top, background-color;
        transition-timing-function: linear, linear, ease-in-out;
        transition-duration: 0.125s, 0.125s, 0.3s;
        background-color: var(--primary-highlight-colour);
        border-radius: 0.25rem;
        width: .2rem;
        position: absolute;
        top: var(--caret-top-offset);
        height: constants.$word-line-height; // should always match line height of words ^
        left: var(--caret-position);

        &.awaiting-input {
          animation: blinking-caret 1.5s linear infinite;
        }
      }

      .word {
        margin-right: 1.25rem;

        &.last-word-in-line {
          text-decoration: underline;
        }

        .letter {
          @include mixins.transition-text-color();
          transition-duration: constants.$letter-colour-transition-duration;
          border-left: 3px solid transparent;

          // if these are changed, need to update letterColour() in TypingTest.tsx
          &.base-text-colour {
            color: var(--base-font-colour);
          }

          &.correct-text-colour {
            color: constants.$correct-font-colour;
          }

          &.incorrect-text-colour {
            color: constants.$incorrect-font-colour;
          }
        }
      }
    }
  }
}

.reset-container {
  display: block;
  justify-content: center;
  position: relative;
  height: 6.5rem;
  margin-top: var(--reset-div-margin);
  opacity: var(--component-opacity);
  @include mixins.transition-margin-opacity();
  margin-bottom: 3rem;

  .reset-button-text {
    transition: opacity 0.15s ease-in-out;
    text-align: center;
    margin-top: -0.1rem;
    opacity: var(--reset-button-text-opacity);
    width: 100%;
    font-weight: 500;
    font-size: constants.$base-font-size;
    height: 20%;
  }

  .reset-button {
    transition: background-color 0.15s ease-in-out;
    width: 150px;
    border-radius: 0.5rem;
    height: 80%;

    &:focus {
      background-color: var(--base-font-colour);
      outline: none;

      .reset-icon {
        color: var(--background-colour);
      }
    }

    &:hover {
      background-color: var(--base-font-colour);

      .reset-icon {
        color: var(--background-colour);
      }
    }

    .reset-icon {
      font-size: 3rem;
      @include mixins.general-color-transition();
      color: var(--base-font-colour);

      &.spinning-icon {
        animation: fa-spin-custom 3s infinite;
      }
    }
  }
}



.bottom-bar-div {
  margin-top: auto;
  width: 100dvw;

  .key-tips {
    opacity: var(--component-opacity);
    @include mixins.general-color-and-opacity-transition();
    font-size: 0.9rem;
    margin-bottom: 1.5rem;
    text-align: center;
    letter-spacing: 0.1rem;
    margin-top: auto;
    font-weight: constants.$bold-font-weight;

    .key-highlight {
      background-color: var(--base-font-colour);
      color: var(--background-colour);
      border-radius: 0.3rem;
      padding: 0.2rem 0.5rem;
      @include mixins.general-color-transition();
    }
  }

  .colour-palette-div {
    font-weight: constants.$bold-font-weight;
    margin-left: 1rem;
    margin-bottom: 1rem;
    opacity: var(--component-opacity);
    @include mixins.general-color-and-opacity-transition();
    position: relative;

    .colour-palette-button {

      .palette-icon {
        margin-right: constants.$standard-icon-spacing;
      }

      &:hover {
        color: constants.$hover-font-colour;
        transition: color 0.15s ease-in-out;

      }
    }

    .colour-palette-options {
      display: var(--colour-palettes-display);
      position: absolute;
      bottom: 0dvh;
      margin-bottom: 2rem;
      background-color: green;
      padding: 1rem;

    }

    .colour-palette-option {
      height: 3rem;
      margin-bottom: .5rem;
      width: 8.5rem;

      :hover {
        cursor: pointer;
      }

      .selectable-colour-palette-label {
        height: 100%;
        border-radius: 2rem;
        padding-left: 1rem;

        .colour-preview {
          margin-top: 0.75rem;
          margin-right: 1rem;
          display: inline-block;
          width: 1.5rem;
          height: 1.5rem;
          border-radius: 0.75rem;
        }
      }
    }
  }
}

.test-results-div {
  transition-property: opacity;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: constants.$component-opacity-fade-duration;
  opacity: var(--results-component-opacity);
  margin-top: -0.5rem;
  border-radius: 0.25rem;
  grid-area: 1 / 1;
  max-width: 100%;
  display: var(--results-component-display);
  padding-top: 1.5rem;
  font-size: constants.$base-font-size;

  & * {
    @include mixins.general-color-transition();
  }

  .results-chart {

    display: flex;
    justify-content: center;
    align-items: center;
  }

  .test-results-statistics {
    margin-top: 1rem;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 5rem);


    .grid-item {
      display: grid;
      text-align: center;

      .label {
        margin-top: -2.6rem;
        color: var(--base-font-colour);
      }

      .score {
        color: var(--primary-highlight-colour);
        font-size: 2.3rem;
      }

      &.wpm {
        display: grid;
        grid-row: span 2;
        grid-column: 3;
        text-align: center;
        font-size: 5.5rem;
        color: var(--primary-highlight-colour);

        .wpm-label {
          color: var(--base-font-colour);
          grid-area: 2/1;
          margin-top: -2.2rem;
          font-size: constants.$base-font-size;
        }
      }
    }
  }
}

@keyframes fa-spin-custom {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}

@keyframes blinking-caret {
  0% {
    background-color: var(--primary-highlight-colour);
  }

  50% {
    background-color: transparent;
  }

  100% {
    background-color: var(--primary-highlight-colour);
  }
}